{"version":3,"sources":["components/Navbar/Navbar.jsx","components/pages/About/About.jsx","components/pages/Portfolio/Portfolio.jsx","components/pages/ContactMe/ContactMe.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","location","useLocation","className","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","to","pathname","About","src","alt","Portfolio","ContactMe","App","useEffect","axios","get","then","response","console","log","data","catch","err","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"+RAwDeA,EArDA,WACb,IAAMC,EAAWC,cAEjB,OACE,6BACE,yBAAKC,UAAU,iDACb,uBAAGA,UAAU,gBAAb,kBAGA,4BACEA,UAAU,iBACVC,KAAK,SACLC,cAAY,WACZC,cAAY,sBACZC,gBAAc,qBACdC,gBAAc,QACdC,aAAW,qBAEX,0BAAMN,UAAU,yBAElB,yBAAKA,UAAU,2BAA2BO,GAAG,sBAC3C,yBAAKP,UAAU,cACb,kBAAC,IAAD,CACEQ,GAAG,SACHR,UACwB,WAAtBF,EAASW,SAAwB,kBAAoB,YAHzD,SAQA,kBAAC,IAAD,CACED,GAAG,aACHR,UACwB,eAAtBF,EAASW,SAA4B,kBAAoB,YAH7D,aAQA,kBAAC,IAAD,CACED,GAAG,WACHR,UACwB,aAAtBF,EAASW,SAA0B,kBAAoB,YAH3D,mBCPGC,G,MA/BD,WACZ,OACE,yBAAKV,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YACb,wCACA,6BACA,yBAAKW,IAAI,oBAAoBC,IAAI,UACjC,yXAQA,0cCTKC,EARG,WACd,OACI,2DCMOC,EARG,WACd,OACI,6BACI,kDCgCGC,MA5Bf,WAYE,OAVAC,qBAAU,WACRC,IACGC,IAAI,eACJC,MAAK,SAACC,GACLC,QAAQC,IAAIF,EAASG,SAEtBC,OAAM,SAACC,GACNJ,QAAQC,IAAIG,QAEf,IAED,kBAAC,IAAD,KACE,6BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWlB,IACjC,kBAAC,IAAD,CAAOgB,OAAK,EAACC,KAAK,SAASC,UAAWlB,IACtC,kBAAC,IAAD,CAAOgB,OAAK,EAACC,KAAK,aAAaC,UAAWf,IAC1C,kBAAC,IAAD,CAAOa,OAAK,EAACC,KAAK,WAAWC,UAAWd,QCjB5Be,QACW,cAA7BC,OAAOhC,SAASiC,UAEe,UAA7BD,OAAOhC,SAASiC,UAEhBD,OAAOhC,SAASiC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdlB,OAAM,SAAAmB,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.d2b8b649.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\n\nconst Navbar = () => {\n  const location = useLocation();\n\n  return (\n    <div>\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <a className=\"navbar-brand\">\n          Kaleb Garrison\n        </a>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarNavAltMarkup\"\n          aria-controls=\"navbarNavAltMarkup\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\n          <div className=\"navbar-nav\">\n            <Link\n              to=\"/about\"\n              className={\n                location.pathname === \"/about\" ? \"nav-link active\" : \"nav-link\"\n              }\n            >\n              About\n            </Link>\n            <Link\n              to=\"/portfolio\"\n              className={\n                location.pathname === \"/portfolio\" ? \"nav-link active\" : \"nav-link\"\n              }\n            >\n              Portfolio\n            </Link>\n            <Link\n              to=\"/contact\"\n              className={\n                location.pathname === \"/contact\" ? \"nav-link active\" : \"nav-link\"\n              }\n            >\n              Contact Me\n            </Link>\n          </div>\n        </div>\n      </nav>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./style.css\"\n\nconst About = () => {\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-sm-7\">\n          <h2>About Me</h2>\n          <hr />\n          <img src=\"/images/kaleb.jpg\" alt=\"Kaleb\" />\n          <p>\n            Hi! My name is Kaleb Garrison. I was born and raised in Atlanta.\n            Currently, I live in Ball Ground, Ga with my wife and two miniature\n            dachshunds. Some of my hobbies are music and sports. I have played\n            the bass guitar for over 10 years and I love watching the Atlanta\n            Falcons play on Sunday. Even though they don't like winning too much\n            as of late.\n          </p>\n          <p>\n            I am currently enrolled in the Full Stack Developer Bootcamp at\n            Georgia Tech. I am currently looking for my next adventure as a\n            software developer. I have over 6 years of experience working in\n            support and have experience using the following: Slack, Zoom,\n            Zendesk, HelpScout, LivePerson, GitHub, Zapier, HipChat, HTML, CSS,\n            JavaScript, jQuery, Notion, Atlassian, VS Code, Sketch, Photoshop,\n            InVisionApp, MailChimp, Appcues.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default About;\n","import React from 'react';\n\nconst Portfolio = () => {\n    return (\n        <div>\n            This is my portfolio page\n        </div>\n    );\n};\n\nexport default Portfolio;","import React from 'react';\n\nconst ContactMe = () => {\n    return (\n        <div>\n            <h1>Contact Me now!!</h1>\n        </div>\n    );\n};\n\nexport default ContactMe;","import React, {useEffect} from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport './App.css';\nimport axios from \"axios\";\nimport Navbar from './components/Navbar/Navbar';\nimport About from \"./components/pages/About/About\";\nimport Portfolio from \"./components/pages/Portfolio/Portfolio\";\nimport ContactMe from \"./components/pages/ContactMe/ContactMe\";\n\nfunction App() {\n\n  useEffect(() => {\n    axios\n      .get(\"/api/config\")\n      .then((response) => {\n        console.log(response.data);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }, []);\n  return (\n    <Router>\n      <div>\n        <Navbar />\n        <Switch>\n        <Route exact path=\"/\" component={About} />\n        <Route exact path=\"/about\" component={About} />\n        <Route exact path=\"/portfolio\" component={Portfolio} />\n        <Route exact path=\"/contact\" component={ContactMe} />\n        </Switch>\n      </div>\n    </Router>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}